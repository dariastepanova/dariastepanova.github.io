hasowner("p1","s17").
project("p1").
hasowner("p1","s27").
project("p1").
hasowner("p1","s28").
project("p1").
hasowner("p1","s54").
project("p1").
hasowner("p1","s60").
project("p1").
hasowner("p1","s63").
project("p1").
hasowner("p1","s74").
project("p1").
hasowner("p1","s86").
project("p1").
hasowner("p1","s99").
project("p1").
hasowner("p2","s116").
project("p2").
hasowner("p2","s124").
project("p2").
hasowner("p2","s130").
project("p2").
hasowner("p2","s132").
project("p2").
hasowner("p2","s139").
project("p2").
hasowner("p2","s144").
project("p2").
hasowner("p2","s155").
project("p2").
hasowner("p2","s187").
project("p2").
hasowner("p3","s213").
project("p3").
hasowner("p3","s218").
project("p3").
hasowner("p3","s236").
project("p3").
hasowner("p3","s238").
project("p3").
hasowner("p3","s246").
project("p3").
hasowner("p3","s249").
project("p3").
hasowner("p3","s251").
project("p3").
hasowner("p3","s281").
project("p3").
hasowner("p3","s287").
project("p3").
hasowner("p4","s312").
project("p4").
hasowner("p4","s320").
project("p4").
hasowner("p4","s351").
project("p4").
hasowner("p4","s380").
project("p4").
hasowner("p4","s381").
project("p4").
hasowner("p4","s391").
project("p4").
% owner of a file is a chief
chief(Y):-hasowner(X,Y),projfile(X).

% staff request is granted unless it is denied 
grant(X):-&cDL["instances/inst_size_010_inst_000.owl",p,b,c,d,"StaffRequest"](X), not deny(X).

% blacklisted staff request is always denied
deny(X):-&cDL["instances/inst_size_010_inst_000.owl",q,b,c,d,"BlacklistedStaffRequest"](X).

% owners of files must have access to them
:-hasowner(Y,Z), deny(X), &rDL["instances/inst_size_010_inst_000.owl",a,b,c,d,"hasTarget"](X,Y), &rDL["instances/inst_size_010_inst_000.owl",a,b,c,d,"hasSubject"](X,Z).

% update information for the first DL-atom
p("Project",X):-projfile(X).

% update for the second DL-atom
q("Staff",X):-chief(X).
