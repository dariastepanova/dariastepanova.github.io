hasowner("p1","s1").
project("p1").
hasowner("p1","s14").
project("p1").
hasowner("p1","s76").
project("p1").
hasowner("p1","s88").
project("p1").
hasowner("p2","s114").
project("p2").
hasowner("p2","s141").
project("p2").
hasowner("p2","s145").
project("p2").
hasowner("p2","s197").
project("p2").
hasowner("p3","s201").
project("p3").
hasowner("p3","s223").
project("p3").
hasowner("p3","s234").
project("p3").
hasowner("p3","s244").
project("p3").
hasowner("p3","s274").
project("p3").
hasowner("p3","s291").
project("p3").
hasowner("p3","s299").
project("p3").
hasowner("p4","s301").
project("p4").
hasowner("p4","s319").
project("p4").
hasowner("p4","s321").
project("p4").
hasowner("p4","s322").
project("p4").
hasowner("p4","s333").
project("p4").
hasowner("p4","s336").
project("p4").
hasowner("p4","s343").
project("p4").
hasowner("p4","s369").
project("p4").
hasowner("p4","s384").
project("p4").
hasowner("p4","s386").
project("p4").
% owner of a file is a chief
chief(Y):-hasowner(X,Y),projfile(X).

% staff request is granted unless it is denied 
grant(X):-&cDL["instances/inst_size_010_inst_005.owl",p,b,c,d,"StaffRequest"](X), not deny(X).

% blacklisted staff request is always denied
deny(X):-&cDL["instances/inst_size_010_inst_005.owl",q,b,c,d,"BlacklistedStaffRequest"](X).

% owners of files must have access to them
:-hasowner(Y,Z), deny(X), &rDL["instances/inst_size_010_inst_005.owl",a,b,c,d,"hasTarget"](X,Y), &rDL["instances/inst_size_010_inst_005.owl",a,b,c,d,"hasSubject"](X,Z).

% update information for the first DL-atom
p("Project",X):-projfile(X).

% update for the second DL-atom
q("Staff",X):-chief(X).
